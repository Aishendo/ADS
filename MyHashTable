import java.util.ArrayList;
import java.util.Objects;

public class MyHashTable<K extends Comparable<K>, V> {

    private class HashNode<K, V> {
        private K key;
        private V value;
        private HashNode<K, V> next;

        public HashNode(K key, V value) {
            this.key = key;
            this.value = value;
        }

        @Override
        public String toString() {
            return "[" + key + " | " + value + "]";
        }

        public K GetKey() {
            return key;
        }

        public V GetValue() {
            return value;
        }
    }

    private ArrayList<HashNode<K, V>> chainArray;
    private int M = 11;
    private int size;

    public MyHashTable() {
        size = 0;
        chainArray = new ArrayList<>(M);
        for (int i = 0; i < M; i ++) chainArray.add(null);
    }

    public MyHashTable(int M) {
        size=0;
        chainArray= new ArrayList<>(M);
        for (int i = 0; i < M; i ++) chainArray.set(i, new ArrayList<>());
    }

    public int size(){
        return size;
    }

    private int hash(K key) {
        return Objects.hashCode(key);
    }

    public void put(K key, V value) {
        int HashIndex=hash(key);
        HashNode<K, V> curs = chainArray.get(HashIndex);
        HashNode<K, V> newNode = new HashNode<>(key, value);
        newNode.next=curs.next;
        curs.next=newNode;
    }

    public V get(K key) {
        V value=null;
        int HashIndex=hash(key);
        HashNode<K, V> curs = chainArray.get(HashIndex);
        while(curs != null) {
            if(curs.GetKey()==key) {
                value=(V) curs.GetValue();
                break;
            }
            curs=curs.next;
        }
        return value;
    }

    public V remove(K key) {
        V value = null;
        int index = hash(key);
        HashNode<K, V> curs = chainArray.get(index);
        if (curs == null){
            return null;
        }
        if (curs.key == key){
            chainArray.set(index, curs.next);
            value = curs.value;
        }
        else{
            HashNode<K, V> prev = curs;
            curs = curs.next;
            while (curs != null){
                if (curs.key == key){
                    value = curs.value;
                    prev.next = curs.next;
                    curs.next = null;
                    break;
                }
                curs = curs.next;
            }
        }
        size--;
        return value;
    }

    public boolean contains(V value) {
        for (int i = 0; i < M; i++) {
            if (chainArray.get(i) != null){
                HashNode<K, V> curs = chainArray.get(i);
                while(curs != null){
                    if((curs.value).equals(value)){
                        return true;
                    } curs = curs.next;
                }
            }
        }
        return false;
    }

    public K getKey(V value) {
        for (int i = 0; i < M; i++) {
            HashNode<K, V> curs = chainArray.get(i);
            while (curs != null) {
                if (curs.GetValue() == value) {
                    value=(V) curs.GetKey();
                    break;
                }
                curs = curs.next;
            }
        }
        return null;
    }
}
